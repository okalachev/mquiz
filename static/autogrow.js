// Generated by CoffeeScript 1.6.3
(function() {
    function w(input, width) { // patch by okalachev TODO: fix
        return input.width(Math.max(width, parseInt(input.css('min-width'))));
    }
    (function($) {
        var inherit;
        inherit = ['font', 'font-family', 'font-size', 'letter-spacing'];
        return $.fn.autoGrow = function(options) {
            var comfortZone, remove, _ref;
            remove = (options === 'remove' || options === false) || !!(options != null ? options.remove : void 0);
            comfortZone = (_ref = options != null ? options.comfortZone : void 0) != null ? _ref : options;
            if (comfortZone != null) {
                comfortZone = +comfortZone;
            }
            return this.each(function() {
                var check, cz, input, input_pre_id, pre_id, prop, styles, testSubject, _i, _j, _len, _len1;
                input = $(this);
                input_pre_id = input.data('autogrow-id');
                pre_id = input_pre_id || Math.floor((1 + Math.random()) * 0x10000000).toString(16);
                input.data('autogrow-id', pre_id);
                testSubject = $('#' + pre_id);
                if (testSubject.length && remove) {
                    input.unbind('input.autogrow');
                    return testSubject.remove();
                } else if (testSubject.length) {
                    styles = {};
                    for (_i = 0, _len = inherit.length; _i < _len; _i++) {
                        prop = inherit[_i];
                        styles[prop] = input.css(prop);
                    }
                    testSubject.css(styles);
                    if (comfortZone != null) {
                        check = function() {
                            testSubject.text(input.val());
                            return w(input, testSubject.width() + comfortZone);
                        };
                        input.unbind('input.autogrow');
                        input.bind('input.autogrow', check);
                        return check();
                    }
                } else if (!remove) {
                    if (input.css('min-width') === '0px') {
                        input.css('min-width', "" + (input.width()) + "px");
                    }
                    styles = {
                        position: 'absolute',
                        top: -99999,
                        left: -99999,
                        width: 'auto',
                        visibility: 'hidden'
                    };
                    for (_j = 0, _len1 = inherit.length; _j < _len1; _j++) {
                        prop = inherit[_j];
                        styles[prop] = input.css(prop);
                    }
                    testSubject = $('<pre id="' + pre_id + '" class="autogrow"/>').css(styles);
                    testSubject.appendTo('body');
                    cz = comfortZone != null ? comfortZone : 70;
                    check = function() {
                        testSubject.text(input.val());
                        return w(input, testSubject.width() + cz);
                    };
                    input.bind('input.autogrow', check);
                    return check();
                }
            });
        };
    })(typeof Zepto !== "undefined" && Zepto !== null ? Zepto : jQuery);

}).call(this);